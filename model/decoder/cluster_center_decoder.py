import torch
import torch.nn as nn
import torch.nn.functional as F
import torch
import math
import warnings
from itertools import repeat
from torch._six import container_abcs
from einops import rearrange

# From PyTorch internals
def _ntuple(n):
    def parse(x):
        if isinstance(x, container_abcs.Iterable):
            return x
        return tuple(repeat(x, n))
    return parse


to_1tuple = _ntuple(1)
to_2tuple = _ntuple(2)
to_3tuple = _ntuple(3)
to_4tuple = _ntuple(4)
to_ntuple = _ntuple

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class MLP(nn.modules):
    def __init__(self, in_feature, hidden_feature, out_feature, drop_rate=0., activation=nn.GELU, bias_flag=True):
        super().__init__()
        self.fc1 = nn.Linear(in_feature,hidden_feature,bias=bias_flag)
        self.fc2 = nn.Linear(hidden_feature,out_feature,bias=bias_flag)
        self.drop = nn.Dropout(drop_rate)
        self.activation = activation
    
    def forward(self,x):
        x = self.fc1(x)
        x = self.activation(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)

class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // self.num_heads
        self.scale = head_dim ** -0.5
        self.qkv = nn.Linear(dim,dim*3,bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim,dim)
        self.proj_drop = nn.Dropout(proj_drop) 


    def forward(self, x, register_hook=False):
        b, n, _, h = *x.shape, self.num_heads

        # self.save_output(x)
        # x.register_hook(self.save_output_grad)

        qkv = self.qkv(x)
        q, k, v = rearrange(qkv, 'b n (qkv h d) -> qkv b h n d', qkv = 3, h = h)

        dots = torch.einsum('bhid,bhjd->bhij', q, k) * self.scale

        attn = dots.softmax(dim=-1)
        attn = self.attn_drop(attn)

        out = torch.einsum('bhij,bhjd->bhid', attn, v)

        self.save_attention_map(attn)
        if register_hook:
            attn.register_hook(self.save_attn_gradients)

        out = rearrange(out, 'b h n d -> b n (h d)')
        out =  self.proj(out)
        out = self.proj_drop(out)
        return out

class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4, qkv_bias=False, mlp_bias=True, drop=0.,attn_drop=0.,norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(dim,num_heads,qkv_bias,attn_drop,drop)
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim*mlp_ratio)
        self.mlp = MLP(dim,mlp_hidden_dim,dim,drop,bias_flag=mlp_bias)
    
    def forward(self,x):
        x = x + self.attn(self.norm1(x))
        x = x + self.mlp(self.norm2(x))
        return x

class cluster_center_decoder(nn.Module):
    def __init__(self, num_classes=21, depth=2, dim=256, num_heads=8, mlp_ratio=4, qkv_bias=False, mlp_bias=True, drop=0.,attn_drop=0.,norm_layer=nn.LayerNorm, 
                 cam_flag=False, supervised_flag=True, num_patches=1024, pooling=None, semi_flag=False):
        super().__init__()
        self.num_classes = num_classes
        self.embed_dim = dim
        self.num_patches = num_patches
        self.blocks = nn.ModuleList([Block(dim,num_heads,mlp_ratio,qkv_bias,mlp_bias,drop,attn_drop,norm_layer) for i in range(depth)])
        self.norm = norm_layer(dim)
        self.cam_flag = cam_flag
        self.supervised_flag = supervised_flag
        self.semi_flag = semi_flag

        if self.supervised_flag is not True:
            if self.cam_flag:
                if pooling=="gmp":
                    self.pooling = F.adaptive_max_pool2d
                elif pooling=="gap":
                    self.pooling = F.adaptive_avg_pool2d
                self.classifier = nn.Conv2d(in_channels=dim,out_channels=num_classes-1,kernel_size=1,bias=False)

            else:
                self.bg_fg_proj = nn.Conv2d(in_channels=dim,out_channels=1,kernel_size=3,padding=1,bias=False)
                self.cls_proj = nn.Conv2d(in_channels=dim,out_channels=num_classes-1,kernel_size=1,bias=False)
                self.bn_head = nn.BatchNorm2d(1)

        else:
            self.seg_proj = nn.Linear(dim, num_classes, bias=False)

        self.apply(self._init_weights)
    
    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            torch.nn.init.xavier_uniform_(m.weight)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.BatchNorm2d):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            torch.nn.init.xavier_uniform_(m.weight)
            if isinstance(m, nn.Conv2d) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    # def distinguish_foreground(self, feature_map):
    #     max_values, max_indices = torch.max(feature_map, dim=1) # 获取每个样本中的21个通道的最大值和对应的通道索引
    #     foreground_mask = torch.zeros_like(max_indices) # 创建一个大小为（B，H，W）的全零张量
    #     foreground_mask[max_indices != 0] = 1 # 将最大值所在的通道索引设置为1，表示前景，其余设置为0，表示背景
    #     return foreground_mask

    def forward(self,x, mask):
        for blk in self.blocks:
            x = blk(x)
        x = self.norm(x)
        b,n,d = x.shape

        if self.cam_flag:
            cls_embed = x.transpose(-1,-2).reshape(b,d,math.sqrt(n),math.sqrt(n))
            cls_cam = self.pooling(cls_embed,(1,1))
            cls_cam = self.classifier(cls_cam)
            cls_cam = cls_cam.view(-1,self.num_classes-1)
            cam = self.classifier(cls_embed)

        if self.supervised_flag is not True:

            cls_embed = x.transpose(-1,-2).reshape(b,d,math.sqrt(n),math.sqrt(n))
            ccam = torch.sigmoid(self.bn_head(self.bg_fg_proj(cls_embed)))
            ccam_ = ccam.reshape(b, 1, n)                            # [N, 1, H*W]  前景mask
            bg_fg_embed = cls_embed.reshape(b, d, n).permute(0, 2, 1).contiguous()   # [N, H*W, C]
            fg_feats = torch.matmul(ccam_, bg_fg_embed) / ccam_.sum(dim=-1,keepdim=True).clamp(min=1e-6)           # [N, 1, C]
            bg_feats = torch.matmul(1 - ccam_, bg_fg_embed) / (1-ccam_).sum(dim=-1,keepdim=True).clamp(min=1e-6)   # [N, 1, C]    

            cls_proj = self.cls_proj(cls_embed).softmax(dim=1)
            cls_proj = cls_proj * ccam.unsqueeze(1)
            _,_,H,W = mask.shape
            mask_cls = mask.sum(dim=-1).sum(dim=-1, keepdim=True)
            mask_cls = mask_cls / ccam_.sum(dim=-1,keepdim=True).clamp(min=1e-6)

            cls_pred = cls_proj.flatten(2).transpose(-1,-2) @ mask_cls
            seg_pred = torch.cat([(1- ccam),cls_proj],dim=1).flatten(2)

            if self.training:
                if self.cam_flag:
                    return cls_pred, fg_feats.squeeze(1), bg_feats.squeeze(1), seg_pred, cls_cam, cam.detach()
                else:
                    return cls_pred, fg_feats.squeeze(1), bg_feats.squeeze(1), seg_pred
            else:
                if self.cam_flag:
                    return cls_pred, seg_pred, cls_cam, cam.detach()
                else:
                    return cls_pred, seg_pred
        else:
            seg_proj = self.seg_proj(x)
            return seg_proj

        
